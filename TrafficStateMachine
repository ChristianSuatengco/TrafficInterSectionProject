`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/26/2021 11:29:01 PM
// Design Name: 
// Module Name: TrafficInterSection
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

/*
A State Machine to manage the state of the intersection to be passed onto other module such as the Crosswalk

Key: N=North, S=South, E=East, W=West, NL=NorthLeft, SL=SouthLeft

Required Inputs &  Outputs

YellowTriggers - Sends a signal to the traffic light state to change the light to yellow
GreenTriggers - Sends a signal to the traffic light state to change the light to green
YellowReset - Resets the YellowTriggers back to 0 after the light has changed to yellow
GreenReset - Resets the GreenTriggers back to 0 after the light has changed to green
CrossWalkDelay - A delay signal that is active when a crosswalk button has recently been pressed
Current State - The current state of the state machine for the intersection 

Registers to hold values: 
IntersectionDelay - A delay signal that is active when the state has currently changed
Delayctr - A counter that counts down when the IntersectionDelay is active that resets IntersectionDelay when it reaches 0
InputStorage - A vector thats holds that values of all 6 traffic inputs to use for cases

Manual Inputs : NTraffic, STraffic, ETraffic, WTraffic, NLTraffic, SLTraffic 

The way the state machine works is that one every clock cycle, 
if first checks if the state has recently changed and if the crosswalk was recently become active then,
it checks the input to see if it meets the requirement to transition to another state.
If it can then it changes state and send signals (Makes the Yellow/Green Triggers Active) to the appropriate light to turn them yellow or green 
and makes the IntersectionDelay active

*/
module TrafficInterSection(
               input CLK, RST, //Needed
               //Resets affect the trigger that changes a stoplight color
               input NLYellowReset, NLGreenReset, SLYellowReset, SLGreenReset, //Needed
			   input NYellowReset, NGreenReset, SYellowReset, SGreenReset, //Needed
			   input EYellowReset, EGreenReset, WYellowReset, WGreenReset, //Needed
			   
			   input NTraffic, STraffic, ETraffic, WTraffic, NLTraffic, SLTraffic, //6 traffic car inputs //Needed
			   input CrossWalkDelay, //Needed
			   
			   output reg NLYellowTrigger, NLGreenTrigger, SLYellowTrigger, SLGreenTrigger, //Needed
			   output reg NYellowTrigger, NGreenTrigger, SYellowTrigger, SGreenTrigger, //Needed
			   output reg EYellowTrigger, EGreenTrigger, WYellowTrigger, WGreenTrigger, //Needed
			   
			   output reg [2:0] CurrentState, //Needed
			   output reg Intersectiondelay,
			   output reg [6:0] delayctr,
			   output reg [5:0] inputStorage);
                            parameter s0 = 3'b000, s1 = 3'b001, s2 = 3'b010, s3 = 3'b011, s4 = 3'b100;
                            reg [2:0] state;
			                

                            always @(posedge CLK or posedge RST) begin	
                            inputStorage <= {NTraffic, STraffic, ETraffic, WTraffic, NLTraffic, SLTraffic};
                            
			    //Begin Reset of any Light Triggers
                            if(NLYellowReset)begin
                            NLYellowTrigger <= 1'b0;
                            end	
                            if(SLYellowReset)begin
                            SLYellowTrigger <= 1'b0;
                            end	      
                            if(NYellowReset)begin
                            NYellowTrigger <= 1'b0;
                            end
                            if(SYellowReset)begin
                            SYellowTrigger <= 1'b0;
                            end
                            if(EYellowReset)begin
                            EYellowTrigger <= 1'b0;
                            end
                            if(WYellowReset)begin
                            WYellowTrigger <= 1'b0;
                            end
                            if(NLGreenReset)begin
                            NLGreenTrigger <= 1'b0;
                            end
                            if(SLGreenReset)begin
                            SLGreenTrigger <= 1'b0;
                            end
                            if(NGreenReset)begin
                            NGreenTrigger <= 1'b0;
                            end
                            if(SGreenReset)begin
                            SGreenTrigger <= 1'b0;
                            end
                            if(EGreenReset)begin
                            EGreenTrigger <= 1'b0;
                            end
                            if(WGreenReset)begin
                            WGreenTrigger <= 1'b0;
                            end
                            //End of Resetting of Light Triggers
                            
                            
                            if(CrossWalkDelay == 1) begin           //CrossWalkDelay check if any crosswalk button was pressed recently
				            end
				            else if(Intersectiondelay == 1)begin    //Delay check to see if lights were changed recently using a counter and a conditional
				            if(delayctr == 0)begin                  //When the counter hits 0/ends 
				            delayctr <= 16;                         //it resets the counter for the next iteration
				            Intersectiondelay <= 0;                 //Delay becomes 0 and allows for the next state change to happen
				            end
				            else begin
				            delayctr <= delayctr - 1 ;              //While the counter is counting down, just decrease the number by 1
				            end
				            end
				            else begin
                            
				            /*if(Intersectiondelay == 1)begin
				            if(delayctr == 0)begin
				            delayctr <= 16;
				            Intersectiondelay <= 0;
				            end
				            else begin
				            delayctr <= delayctr - 1 ;
				            end
				            end
				            else if(CrossWalkDelay == 1) begin
				            end	            
                            else begin */
	
                                if(RST) begin // Initialize on Reset
                                state <= s0;
                                NLYellowTrigger <=1'b0; SLYellowTrigger <=1'b0;
                                NYellowTrigger <= 1'b0; SYellowTrigger <= 1'b0;
                                EYellowTrigger <= 1'b0; WYellowTrigger <= 1'b0;
                                NLGreenTrigger <=1'b0; SLGreenTrigger <=1'b0; 
                                NGreenTrigger <= 1'b1; SGreenTrigger <= 1'b1;   //Reset initializes only the N and S to green everything else is Red
                                EGreenTrigger <= 1'b0; WGreenTrigger <= 1'b0;
                                Intersectiondelay <= 1'b0; delayctr <= 16;
                                end
                                else begin
                                                                                //First Case line is based on the current state
                                                                                //Second Case line is based on the input when the state change happens
/*
Description of each state:
s0: 3'b000 - The North and South Traffic Lights are Green and all others are Red
s1: 3'b001 - The East and West Traffic Lights are Green and all others are Red
s2: 3'b010 - The North and NorthLeft Traffic Lights are Green and all others are Red
s3: 3'b011 - The South and SouthLeft Traffic Lights are Green and all others are Red
s4: 3'b100 - The NorthLeft and SouthLeft Traffic Lights are Green and all others are Red
*/
                               	   case(state)
                                    s0: begin                                   //North, South Green | East, West, North Left, South Left Red
                                    casex(inputStorage)                         
                                    
                                        6'b0011xx, 6'b0001xx, 6'b0010xx: begin
                                        state <= s1;
                                        NYellowTrigger <= 1'b1;
				                        SYellowTrigger <= 1'b1;
                                        EGreenTrigger <=1'b1;
				                        WGreenTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
                                            end
                                            
                                        6'b10xx1x, 6'b000010: begin
                                        state <= s2;
				                        SYellowTrigger <= 1'b1;
				                        NLGreenTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
                                            end
                                            
                                        6'b01xxx1, 6'b000001: begin
                                        state <= s3;
                                        NYellowTrigger <= 1'b1;
				                        SLGreenTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
                                            end
                                            
                                        6'b000001, 6'b000010, 6'b000011: begin
                                        state <= s4;
                                        NYellowTrigger <= 1'b1;
				                        SYellowTrigger <= 1'b1;
				                        NLGreenTrigger <= 1'b1;
				                        SLGreenTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
				                        end
                                            
                                        endcase 		
                                     	end
                                     	
                                    s1:begin                                    //East, West Green | North, South, North Left, South Left Red
                                    casex(inputStorage)
                                     
                                        6'bxx0000:begin
                                        state <= s0;
                                        EYellowTrigger <= 1'b1;
				                        WYellowTrigger <= 1'b1;
				                        Intersectiondelay <= 1;				                        
				                        NGreenTrigger <=1'b1;
				                        SGreenTrigger <= 1'b1;
                                        end
                                        
                                        6'bxx0010:begin
                                        state <= s2;
                                        EYellowTrigger <= 1'b1;
				                        WYellowTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
				                        NGreenTrigger <=1'b1;
				                        NLGreenTrigger <=1'b1;
                                        end
                                        
                                        6'bxx0001:begin
                                        state <= s3;
                                        EYellowTrigger <= 1'b1;
				                        WYellowTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
				                        SGreenTrigger <= 1'b1;
				                        SLGreenTrigger <= 1'b1;
                                        end
                                        
                                        6'bxx0011:begin
                                        state <= s4;
                                        EYellowTrigger <= 1'b1;
				                        WYellowTrigger <= 1'b1;
				                        Intersectiondelay <= 1;
				                        NLGreenTrigger <= 1'b1;
				                        SLGreenTrigger <= 1'b1;
                                        end
                                        
                                        endcase		
                                     	end
                                     	
                                    s2:begin                                    //North, North Left Green | South, South Left, East, West Red
                                    casex(inputStorage)
                                    
                                        6'b1xxx0x:begin
                                        state <= s0;
                                        NLYellowTrigger <= 1'b1;
                                        SGreenTrigger <=1'b1;
                                        Intersectiondelay <= 1;
                                        end
                                        
                                        6'b00100x, 6'b00010x, 6'b00110x:begin
                                        state <= s1;
                                        NLYellowTrigger <= 1'b1;
                                        NYellowTrigger <= 1'b1;
                                        EGreenTrigger <= 1'b1;
                                        WGreenTrigger <= 1'b1;
                                        Intersectiondelay <= 1;                                       
                                        end
                                        
                                        6'b01xx01:begin
                                        state <= s3;
                                        NLYellowTrigger <= 1'b1;
                                        NYellowTrigger <= 1'b1;
                                        SGreenTrigger <= 1'b1;
                                        SLGreenTrigger <= 1'b1;
                                        Intersectiondelay <= 1;  
                                        end
                                        
                                        6'b0xxx11:begin
                                        state <= s4;
                                        NYellowTrigger <= 1'b1;
                                        SLGreenTrigger <= 1'b1;
                                        Intersectiondelay <= 1; 
                                        end
                                        
                                        endcase
                                        end
                                        
                                        s3:begin                                //South, South Left Green | North, North Left, East, West Red
                                    casex(inputStorage)
                                    
                                        6'bx1xxx0:begin
                                        state <= s0;
                                        SLYellowTrigger <= 1'b1;
                                        NGreenTrigger <=1'b1;
                                        Intersectiondelay <= 1;
                                        end
                                        
                                        6'b0010x0, 6'b0001x0, 6'b0011x0:begin
                                        state <= s1;
                                        SLYellowTrigger <= 1'b1;
                                        SYellowTrigger <= 1'b1;
                                        EGreenTrigger <= 1'b1;
                                        WGreenTrigger <= 1'b1;
                                        Intersectiondelay <= 1;
                                        end
                                        
                                        6'b10xx10:begin
                                        state <= s2;
                                        SLYellowTrigger <= 1'b1;
                                        SYellowTrigger <= 1'b1;
                                        NGreenTrigger <= 1'b1;
                                        NLGreenTrigger <= 1'b1;
                                        Intersectiondelay <= 1; 
                                        end
                                        
                                        6'bx0xx11:begin
                                        state <= s4;
                                        SYellowTrigger <= 1'b1;
                                        NLGreenTrigger <= 1'b1;
                                        Intersectiondelay <= 1;
                                        end
                                        
                                        endcase
                                        end
                                        
                                    s4:begin                                    //North Left, South Left Green | North, South, East, West Red
                                    casex(inputStorage)
                                    
                                        6'b11xxxx,6'b000000:begin
                                        state <= s0;
                                        NLYellowTrigger <= 1'b1;
                                        SLYellowTrigger <= 1'b1;
                                        NGreenTrigger <= 1'b1;
                                        SGreenTrigger <= 1'b1;
                                        Intersectiondelay <=1;
                                        end
                                        
                                        6'b101100, 6'b011100, 6'b001100:begin
                                        state <= s1;
                                        NLYellowTrigger <= 1'b1;
                                        SLYellowTrigger <= 1'b1;
                                        EGreenTrigger <= 1'b1;
                                        WGreenTrigger <= 1'b1;
                                        Intersectiondelay <=1;
                                        end
                                        
                                        6'b1xxx10:begin
                                        state <= s2;
                                        SLYellowTrigger <= 1'b1;
                                        NGreenTrigger <= 1'b1;
                                        Intersectiondelay <=1;
                                        end
                                        
                                        6'bx1xx01:begin
                                        state <= s3;
                                        NLYellowTrigger <= 1'b1;
                                        SGreenTrigger <= 1'b1;
                                        Intersectiondelay <=1;
                                        end
                                    
                                        endcase
                                     	end
                                     	
                                     endcase
                                     end
                               end
                             end
                             
                             always@(state)begin
                             CurrentState<=state;
                             end
			
			                                       
endmodule
